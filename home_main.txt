# menu_main.py
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os 

st.set_page_config(page_title="Home - Personal Finance Tracker", layout="wide")

# st.image('images/tracker.gif',width=700,use_container_width=False)

st.title("💸 Personal Expense Tracker")

# st.subheader("🏠 Dashboard Overview")



CSV_FILE = "expenses_data.csv"
# Load or initialize CSV data
if os.path.exists(CSV_FILE):
    df_data = pd.read_csv(CSV_FILE, parse_dates=["Date"])
else:
    df_data = pd.DataFrame(columns=["Type", "Date", "Category", "Amount", "Notes"])


tab1, tab2, tab3,tab4 = st.tabs(["📊 Summary", "➕ Add Expense", "🕒 Recent Transactions", "📈 Insights"])


with tab1:
    # Summary Columns
    st.subheader("📊 Summary")
    col1, col2, col3 = st.columns(3)

    total_income = df_data[df_data["Type"] == "Income"]["Amount"].sum()
    total_expenses = df_data[df_data["Type"] == "Expense"]["Amount"].sum()
    net_savings = total_income - total_expenses

    col1.metric("Total Income", f"₹ {total_income:.2f}")
    col2.metric("Total Expenses", f"₹ {total_expenses:.2f}")
    col3.metric("Net Savings", f"₹ {net_savings:.2f}", delta=f"{net_savings - total_expenses:.2f}")

    
with tab2:
    # Add Entry Button
    # st.markdown("---")
    uploaded_file = st.file_uploader("📂 Upload Expense CSV", type="csv")
    if uploaded_file:
        new_data = pd.read_csv(uploaded_file)
        df_data = pd.concat([df_data, new_data], ignore_index=True)
        df_data.to_csv(CSV_FILE, index=False)
        st.success("Uploaded entries added successfully!")

        st.subheader("🧾 Add Expense Entry")
        st.markdown("Use this form to quickly log any income or expense.")

        df_data["Month"] = df_data["Date"].dt.to_period("M").astype(str)
        monthly_summary = df_data.pivot_table(index="Month", columns="Type", values="Amount", aggfunc="sum", fill_value=0)
        monthly_summary["Net"] = monthly_summary.get("💰 Income", 0) - monthly_summary.get("💸 Expense", 0)

        net_chart = px.line(monthly_summary.reset_index(), x="Month", y="Net", title="📈 Net Savings Trend")
        st.plotly_chart(net_chart, use_container_width=True)


    
    with st.form("quick_add_form"):
        
        col1, col2, col3, col4 = st.columns(4)
        entry_type = col1.selectbox("Type", ["💰 Income", "💸 Expense"])
        entry_date = col2.date_input("Date", datetime.today())
        category = col3.selectbox("Category", [
    "🍔 Food", "🚗 Travel", "🏠 Rent", "💼 Salary", "🛍️ Shopping", "🛠️ Utilities", "🎉 Entertainment", "📚 Education", "💊 Health", "Other"
])
        amount = col4.number_input("Amount", min_value=0.0, step=10.0)
        notes = st.text_input("Notes")
        quick_submit = st.form_submit_button("Add Entry")

    if quick_submit:
        new_entry = pd.DataFrame([{
            "Type": entry_type,
            "Date": pd.to_datetime(entry_date),
            "Category": category,
            "Amount": amount,
            "Notes": notes
        }])
        df_data = pd.concat([df_data, new_entry], ignore_index=True)
        df_data.to_csv(CSV_FILE, index=False)
        st.success("Entry added and saved to CSV!")

with tab3:
        # Recent Transactions
    # st.markdown("---")
    st.subheader("🕒 Recent Transactions")
    if not df_data.empty:
        df_data_sorted = df_data.sort_values(by="Date", ascending=False)
        st.dataframe(df_data_sorted.head(10))
    else:
        st.info("No transactions yet. Start by adding one above.")

with tab4:
    with st.expander("🔍 Filter Data"):
        selected_month = st.selectbox("Select Month", sorted(df_data["Date"].dt.strftime("%B %Y").unique(), reverse=True))
        selected_category = st.multiselect("Filter by Category", df_data["Category"].unique())

        filtered_df = df_data.copy()
        if selected_month:
            filtered_df = filtered_df[filtered_df["Date"].dt.strftime("%B %Y") == selected_month]
        if selected_category:
            filtered_df = filtered_df[filtered_df["Category"].isin(selected_category)]

        if not filtered_df.empty:
            csv = filtered_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="📤 Download Filtered Report as CSV",
                data=csv,
                file_name="filtered_expenses.csv",
                mime='text/csv',
            )


    if not df_data.empty:
        st.subheader("📊 Expense Distribution by Category")
        expense_df = df_data[df_data["Type"] == "Expense"]
        category_sum = expense_df.groupby("Category")["Amount"].sum().reset_index()

        pie_chart = px.pie(category_sum, names="Category", values="Amount", title="Category-wise Expenses")
        st.plotly_chart(pie_chart, use_container_width=True)

        st.subheader("📈 Daily Trend")
        df_data["Date"] = pd.to_datetime(df_data["Date"])
        daily_sum = df_data.groupby("Date")["Amount"].sum().reset_index()
        line_chart = px.line(daily_sum, x="Date", y="Amount", title="Daily Financial Flow")
        st.plotly_chart(line_chart, use_container_width=True)

        st.subheader("📊 Bar Chart - Income vs Expenses by Category")
        grouped = df_data.groupby(["Category", "Type"]).sum().reset_index()
        bar_chart = px.bar(grouped, x="Category", y="Amount", color="Type", barmode="group",
                        title="Income vs Expenses per Category")
        st.plotly_chart(bar_chart, use_container_width=True)
    else:
        st.info("No transactions to display. Please add your first entry!")


